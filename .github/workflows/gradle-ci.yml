# This workflow execute a sequence of jobs to build (tdd), create a release and publish a new package version.
# All command sequence will run on linux bash, to analyze gradle properties and request gradle publish command.
# For request latest released version, will get from github API REST.
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: 00 - Java CI with Gradle For Build Release and Publish

on:  
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  
jobs:
  job_build:
    runs-on: ubuntu-latest       
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
                 
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      if: ${{ always() }}
      run: ./gradlew build
      
    - name: Getting current version with Gradle
      id: step_curr_ver
      if: ${{ success() }}
      run: |
        CURRENT_VERSION=$(./gradlew properties --no-daemon --console=plain -q | grep -oP '(?<=version:\s).*')
        CURRENT_VERSION_INT="${CURRENT_VERSION//[^0-9]/}"
        echo "Current Version ${CURRENT_VERSION}"
        echo ::set-output name=CURRENT_VERSION::${CURRENT_VERSION} 
        echo ::set-output name=CURRENT_VERSION_INT::${CURRENT_VERSION_INT}
      
    - name: Recovering latest version released
      id: step_lat_ver
      if: ${{ success() }}
      run: |
        LATEST_VERSION=$(curl -u my_client_id:$TOKEN --silent https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | grep -oP '(?<="tag_name":\s").*?(?=")')
        LATEST_VERSION_INT="${LATEST_VERSION//[^0-9]/}"
        echo "Latest Version Released ${LATEST_VERSION}"
        echo ::set-output name=LATEST_VERSION::${LATEST_VERSION}
        echo ::set-output name=LATEST_VERSION_INT::${LATEST_VERSION_INT}
      env:
        TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token       
    
    - name: Comparing Versions
      if: ${{ success() }}
      run: |        
        echo "${{ steps.step_curr_ver.outputs.CURRENT_VERSION }}"
        echo "${{ steps.step_lat_ver.outputs.LATEST_VERSION }}"
        echo "${{ steps.step_curr_ver.outputs.CURRENT_VERSION_INT }}"
        echo "${{ steps.step_lat_ver.outputs.LATEST_VERSION_INT }}"
        
    - name: Print
      if: ${{ success()}} && (${{ steps.step_curr_ver.outputs.CURRENT_VERSION_INT }} > ${{ teps.step_lat_ver.outputs.LATEST_VERSION_INT }}) 
      run: echo "Current version (${CURRENT_VERSION}) is greater than latest released version (${LATEST_VERSION})"

#     - name: Building, Comparing and Publishing
#       run: ./gradlew build && if [ $CURRENT_VERSION -gt $LATEST_VERSION ]; then ./gradlew publish; else echo "Current version is not greater than latest version released. Publish operation aborted!"; fi;
#       env:
#         USERNAME: ${{ github.actor }}
#         TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
