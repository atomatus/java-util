# This workflow execute a sequence of jobs to build (tdd), create a release and publish a new package version.
# All command sequence will run on linux bash, to analyze gradle properties and request gradle publish command.
# For request latest released version, will get from github API REST.
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: 00 - Java TDD CI with Gradle For Build Release and Publish

on:  
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  
jobs:
  job_build:
    runs-on: ubuntu-latest       
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
      env:
        TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token       
        USERNAME: ${{ github.repository }} # Owner and Repository name. Ex.: OWNER/REPOSITORY
   
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Getting current version with Gradle
      run: echo "Current Version ${CURRENT_VERSION}"
      env:
        CURRENT_VERSION: $(./gradlew properties --no-daemon --console=plain -q | grep "^version:" | awk '{gsub("[^[:digit:]]+","");print($1,$2,$3,$4)}')
      
    - name: Recovering latest version released
      run: echo "Latest Version Released ${LATEST_VERSION}"
      env: 
        LATEST_VERSION: $(curl -u my_client_id:$TOKEN --silent https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | grep "tag_name" | awk '{gsub("[^[:digit:]]+","");print($1,$2,$3,$4)}') 
    
    - name: Building, Comparing and Publishing
      run: ./gradlew build && if [ $CURRENT_VERSION -gt $LATEST_VERSION ]; then ./gradlew publish; else echo "Current version is not greater than latest version released. Publish operation aborted!"; fi;

    
